/*
var boundary = [[150,469],[156,468],[162,464],[170,460],[175,451],[182,444],[188,438],[194,433],[201,432],[208,430],[224,424],[235,421],[242,418],[256,416],[264,416],[272,414],[287,414],[297,414],[313,414],[322,415],[325,415],[332,417],[338,417],[346,421],[350,423],[353,429],[358,434],[359,437],[370,442],[374,447],[383,451],[392,456],[404,460],[410,465],[417,469],[423,473],[428,482],[433,486],[438,492],[448,496],[456,500],[465,499],[472,491],[474,485],[475,476],[490,467],[499,465],[508,457],[514,449],[525,442],[533,433],[539,427],[556,421],[565,419],[574,415],[583,413],[590,411],[603,406],[613,403],[620,400],[638,396],[644,395],[659,392],[673,391],[679,391],[689,395],[696,397],[706,395],[719,390],[725,380],[731,367],[736,353],[743,344],[743,337],[733,324],[726,320],[710,312],[706,298],[692,290],[684,288],[670,288],[662,293],[647,296],[639,301],[629,300],[619,294],[609,285],[604,280],[596,268],[589,259],[579,254],[573,248],[562,242],[554,243],[544,238],[534,234],[523,228],[515,228],[508,228],[501,219],[495,208],[490,202],[485,197],[477,189],[468,181],[453,177],[441,175],[426,167],[415,170],[400,174],[391,184],[382,190],[372,197],[366,204],[358,207],[350,210],[339,207],[328,208],[317,207],[311,203],[302,199],[293,197],[286,198],[274,202],[267,206],[261,209],[254,216],[247,221],[241,222],[236,227],[232,227],[227,235],[221,240],[216,250],[214,252],[208,261],[200,268],[199,276],[195,283],[189,297],[188,304],[185,312],[183,316],[175,327],[169,341],[166,351],[165,355],[165,367],[165,377],[163,383],[153,398],[153,406],[151,412],[150,420],[149,426],[149,437],[143,448],[137,454],[139,463],[144,470]];
*/

var boundary = [[1.2619523999216926,103.61961364746094],[1.2626388787961478,103.62373352050781],[1.265728031486411,103.6285400390625],[1.267787464569386,103.63162994384766],[1.2695036575539094,103.63574981689453],[1.2722495639590072,103.6405563354492],[1.278084605358042,103.6405563354492],[1.2804872656134916,103.64364624023438],[1.2815169764623588,103.64913940429688],[1.28563581571471,103.64913940429688],[1.292500533024804,103.64604949951172],[1.2997084662268736,103.64192962646484],[1.3024543401366768,103.6395263671875],[1.3052002110545322,103.63815307617188],[1.3079460789741553,103.63609313964844],[1.3151539679518205,103.63609313964844],[1.3148107356145071,103.63883972167969],[1.3113784096477825,103.64124298095703],[1.3100054779424755,103.64398956298828],[1.3076028456483761,103.64707946777344],[1.3034840420818357,103.64982604980469],[1.2997084662268736,103.65428924560547],[1.2969625893314456,103.65737915039062],[1.2928437684040126,103.6618423461914],[1.290441119775755,103.66596221923828],[1.292500533024804,103.66973876953125],[1.2945599446037437,103.67179870605467],[1.2990219972826829,103.67145538330077],[1.2997084662268736,103.67591857910156],[1.2990219972826829,103.68209838867188],[1.2993652317780917,103.68656158447264],[1.3003949349844803,103.69239807128906],[1.3007381692932671,103.6954879760742],[1.301081403555376,103.70063781738281],[1.3021111060614448,103.7057876586914],[1.3027975741651676,103.70990753173827],[1.3041705098113472,103.71368408203125],[1.3041705098113472,103.71780395507811],[1.3027975741651676,103.7215805053711],[1.301767871939471,103.72673034667967],[1.301767871939471,103.73050689697266],[1.3007381692932671,103.73531341552734],[1.300051700629016,103.74046325683594],[1.2993652317780917,103.74526977539062],[1.2993652317780917,103.74767303466797],[1.2979922935167199,103.75316619873047],[1.2962761196418218,103.7552261352539],[1.292500533024804,103.7607192993164],[1.290784355433135,103.76243591308594],[1.287695232850346,103.76827239990234],[1.2846061065237642,103.7723922729492],[1.2835763969178322,103.77685546875],[1.2815169764623588,103.77788543701172],[1.2770548931316255,103.78475189208984],[1.2753387051710048,103.787841796875],[1.2736225160659695,103.79058837890625],[1.271906325818072,103.79539489746094],[1.2712198493992468,103.7984848022461],[1.2684739418997963,103.80191802978516],[1.26675774823251,103.80535125732422],[1.2643550751889787,103.80878448486328],[1.2643550751889787,103.81290435791016],[1.264011836001132,103.81668090820312],[1.2622956393815785,103.82217407226562],[1.262982118165413,103.82560729980469],[1.265041553428506,103.83041381835938],[1.2674442258359135,103.83556365966795],[1.2664145093626042,103.84002685546875],[1.265728031486411,103.84277343749999],[1.264011836001132,103.84723663330078],[1.26675774823251,103.84963989257812],[1.2705333727979087,103.85135650634764],[1.2715630876314767,103.85513305664062],[1.2684739418997963,103.85856628417967],[1.2688171804967088,103.86302947998047],[1.2725928020542823,103.86474609375],[1.2743089918452106,103.86714935302734],[1.2767116556311267,103.87126922607422],[1.279114317171584,103.87264251708984],[1.2808305026090836,103.87676239013672],[1.2835763969178322,103.8808822631836],[1.2852925793638545,103.88259887695311],[1.2866655244903518,103.88603210449219],[1.2914708266088921,103.89049530029297],[1.2928437684040126,103.89495849609375],[1.2942167094566774,103.89839172363281],[1.2962761196418218,103.90216827392578],[1.2993652317780917,103.90766143798828],[1.2993652317780917,103.91143798828125],[1.3007381692932671,103.9145278930664],[1.3038272759700005,103.92139434814452],[1.3045137436059147,103.92654418945312],[1.3048569773536387,103.92997741699219],[1.3062299118760903,103.93512725830078],[1.3096622448985573,103.93993377685547],[1.3103487109393597,103.94577026367188],[1.3110351767920387,103.94954681396484],[1.3117216424564797,103.95366668701172],[1.313094573220279,103.9581298828125],[1.3154972002419345,103.96533966064453],[1.3154972002419345,103.9694595336914],[1.316870128930104,103.9752960205078],[1.3165268968289274,103.97838592529297],[1.3165268968289274,103.98250579833984],[1.3151539679518205,103.98696899414062],[1.313094573220279,103.9917755126953],[1.3124081079325938,103.99726867675781],[1.3117216424564797,103.99967193603516],[1.3117216424564797,104.00276184082031],[1.3134378057934368,104.00653839111327],[1.3154972002419345,104.01203155517578],[1.3158404324848365,104.01649475097656],[1.3158404324848365,104.0185546875],[1.3161836646805136,104.02267456054686],[1.3182430568620136,104.02507781982422],[1.3199592157122004,104.02885437011719],[1.323391529857783,104.02988433837889],[1.3247644541867094,104.02473449707031],[1.3254509160659214,104.02267456054686],[1.3312858343461043,104.02233123779295],[1.33883688455388,104.0237045288086],[1.346044683512217,104.02679443359375],[1.349133733693114,104.0291976928711],[1.3559982755948157,104.029541015625],[1.3621763466641712,104.02748107910156],[1.3649221509479303,104.02130126953125],[1.3662950519144486,104.01546478271484],[1.3686976267174014,104.01203155517578],[1.3748756651474212,104.00447845458984],[1.3800240182955519,104.00138854980469],[1.3865452496126591,104.00001525878906],[1.3889478039948095,103.99520874023438],[1.3910071343783486,103.98902893066406],[1.391693577440254,103.9804458618164],[1.3906639127724936,103.97735595703125],[1.3868884718166363,103.97117614746094],[1.3858588050553968,103.96808624267577],[1.3831130248377246,103.96465301513672],[1.3827698020869972,103.9581298828125],[1.3827698020869972,103.95160675048827],[1.384485915344098,103.94542694091797],[1.3896342476555246,103.94062042236328],[1.393409684220677,103.9368438720703],[1.3989012175086004,103.93409729003906],[1.4009605391805493,103.93238067626953],[1.4037062985935518,103.92757415771484],[1.4078249316654154,103.92345428466797],[1.411600338923334,103.91899108886719],[1.41743504716723,103.91590118408203],[1.421553655902863,103.91143798828125],[1.4201807871396008,103.90388488769531],[1.4208672216232323,103.89873504638672],[1.4229265238497912,103.89324188232422],[1.4249858242378626,103.88912200927734],[1.4291044194878293,103.88259887695311],[1.4315069299741268,103.87641906738281],[1.4304772829308758,103.87195587158203],[1.4280747713669302,103.86886596679688],[1.4280747713669302,103.86474609375],[1.4332230073518357,103.86337280273438],[1.4369983730540008,103.86096954345703],[1.4414601608369573,103.85616302490234],[1.4466083666436405,103.85307312011719],[1.4517565607685534,103.85101318359374],[1.456904743170158,103.84689331054688],[1.4593072242672525,103.84277343749999],[1.4623961247633834,103.83899688720703],[1.465141810524561,103.83350372314453],[1.466857862416727,103.8259506225586],[1.4685739129927795,103.8211441040039],[1.4706331719445842,103.8149642944336],[1.4702899622511534,103.81084442138672],[1.4692603328543452,103.80466461181639],[1.467887492920394,103.80088806152344],[1.4647985999883342,103.79573822021483],[1.4606800694564723,103.787841796875],[1.4579343782400327,103.78475189208984],[1.4548454716189803,103.78166198730469],[1.4527861981880819,103.77582550048828],[1.450383710146488,103.7710189819336],[1.4472947932028308,103.76792907714844],[1.4424898029308453,103.76312255859375],[1.439057660807751,103.76106262207031],[1.439057660807751,103.75556945800781],[1.4383712317629698,103.74938964843749],[1.4394008752526888,103.74320983886719],[1.440773732515676,103.73977661132812],[1.442833016858612,103.73497009277344],[1.4462651532861726,103.73016357421875],[1.4500404973608074,103.72535705566406],[1.4500404973608074,103.71780395507811],[1.4486676456977468,103.71231079101562],[1.4462651532861726,103.70647430419922],[1.4431762307345994,103.70304107666014],[1.4397440896459617,103.6996078491211],[1.4376848025116815,103.69583129882812],[1.435625513519856,103.69205474853516],[1.4332230073518357,103.68759155273436],[1.4308204986633148,103.68141174316406],[1.4277315552241232,103.67729187011719],[1.4242993909796224,103.67488861083984],[1.4198375698213372,103.6724853515625],[1.4140028676239684,103.67008209228516],[1.410570683005712,103.6673355102539],[1.4067952740787528,103.66424560546874],[1.402676639191187,103.66218566894531],[1.395812231612477,103.6618423461914],[1.392380020302357,103.66081237792969],[1.3892910258500961,103.66046905517578],[1.3851723602991717,103.65909576416016],[1.3831130248377246,103.66046905517578],[1.3824265792866406,103.66493225097656],[1.38174013353709,103.66802215576172],[1.3786511252106772,103.66973876953125],[1.3755621128762439,103.67042541503906],[1.3735027690977097,103.66630554199219],[1.3735027690977097,103.6614990234375],[1.3735027690977097,103.65531921386719],[1.3728163207770117,103.65119934082031],[1.3669815021035319,103.65222930908203],[1.3625195723708807,103.6505126953125],[1.3608034433485081,103.64604949951172],[1.3573711816421556,103.64295959472656],[1.3539389150639312,103.64364624023438],[1.3511930983018892,103.6402130126953],[1.3484472784360202,103.63746643066406],[1.3426124009441485,103.63471984863281],[1.338150426403194,103.63334655761719],[1.3319722944135324,103.63197326660155],[1.3285399921660488,103.63128662109375],[1.323734761011294,103.62957000732422],[1.3178998249499785,103.62751007080078],[1.3141242707983072,103.62613677978516],[1.3069163788560596,103.62201690673828],[1.3021111060614448,103.62030029296875],[1.2969625893314456,103.61858367919922],[1.290784355433135,103.61824035644531],[1.28563581571471,103.61858367919922],[1.2818602133200037,103.61755371093749],[1.277398130586286,103.61446380615234],[1.2743089918452106,103.6117172241211],[1.2695036575539094,103.612060546875],[1.265728031486411,103.61274719238281],[1.2619523999216926,103.61618041992188]];

var inside = function(point, vs) {
        // ray-casting algorithm based on
        // http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html

        var x = point[0], y = point[1];

        var inside = false;
        for (var i = 0, j = vs.length - 1; i < vs.length; j = i++) {
            var xi = vs[i][0], yi = vs[i][1];
            var xj = vs[j][0], yj = vs[j][1];

            var intersect = ((yi > y) != (yj > y))
                && (x < (xj - xi) * (y - yi) / (yj - yi) + xi);
            if (intersect) inside = !inside;
        }

        return inside;
    };

showHide = function(selector) {
  d3.select(selector).select('.hide').on('click', function(){
    d3.select(selector)
      .classed('visible', false)
      .classed('hidden', true);
  });

  d3.select(selector).select('.show').on('click', function(){
    d3.select(selector)
      .classed('visible', true)
      .classed('hidden', false);
  });
}

voronoiMap = function(map, initialSelections) {
  var pointTypes = d3.map(),
      lastSelectedPoint;

  points.forEach(function(point) {
    pointTypes.set(point.type, {type: point.type, color: point.color});
  })

  var voronoi = d3.geom.voronoi()
      .clipExtent([[0, 0], [window.innerWidth, window.innerHeight]])
      .x(function(d) { return d.x; })
      .y(function(d) { return d.y; });

  var selectPoint = function() {
    d3.selectAll('.selected').classed('selected', false);

    var cell = d3.select(this),
        point = cell.datum();

    lastSelectedPoint = point;
    cell.classed('selected', true);

    d3.select('#selected h1')
      .html('')
      .append('a')
        .text(point.name)
        .attr('href', point.url)
        .attr('target', '_blank')
  }

  var drawPointTypeSelection = function() {
    showHide('#selections')
    labels = d3.select('#toggles').selectAll('input')
      .data(pointTypes.values())
      .enter().append("label");

    labels.append("input")
      .attr('type', 'checkbox')
      .property('checked', function(d) { return true; })
      .attr("value", function(d) { return d.type; })
      .on("change", drawWithLoading);

    labels.append("span")
      .attr('class', 'key')
      .style('background-color', function(d) { return '#' + d.color; });

    labels.append("span")
      .text(function(d) { return d.type});
  }

  var selectedTypes = function() {
    return d3.selectAll('#toggles input[type=checkbox]')[0].filter(function(elem) {
      return elem.checked;
    }).map(function(elem) {
      return elem.value;
    })
  }

  var pointsFilteredToSelectedTypes = function() {
    var currentSelectedTypes = d3.set(selectedTypes());

    return points.filter(function(item){
      return currentSelectedTypes.has(item.type);
    });
  }

  var drawWithLoading = function(e){
    d3.select('#loading').classed('visible', true);
    if (e && e.type == 'viewreset') {
      d3.select('#overlay').remove();
    }
    setTimeout(function(){
      draw();
      d3.select('#loading').classed('visible', false);
    }, 0);
  }

  var draw = function() {
    d3.select('#overlay').remove();

    var bounds = map.getBounds(),
        topLeft = map.latLngToLayerPoint(bounds.getNorthWest()),
        bottomRight = map.latLngToLayerPoint(bounds.getSouthEast()),
        existing = d3.set(),
        drawLimit = bounds.pad(0.4);

    filteredPoints = pointsFilteredToSelectedTypes().filter(function(d) {
      var latlng = new L.LatLng(d.latitude, d.longitude);

      if (!drawLimit.contains(latlng)) { return false };

      var point = map.latLngToLayerPoint(latlng); // x,y coordiantes

      key = point.toString();
      if (existing.has(key)) { return false };
      existing.add(key);

      d.x = point.x;
      d.y = point.y;
      return true;
    });

    voronoi(filteredPoints).forEach(function(d) { d.point.cell = d; })

    var getMaxDistance = function(filteredPoints){

      var center_x = null,
          center_y = null,
          center_lng = null,
          center_lat = null,
          polygon_x = null,
          polygon_y = null,
          polygon_lat = null,
          polygon_lng = null,
          boundary_lat = null,
          boundary_lng = null,
          maxDistance = 0;

      for(var a=0;a<filteredPoints.length;a++){
        p = filteredPoints[a];
        temp_center_x = p.x;
        temp_center_y = p.y;
        temp_center_lng = p.longitude;
        temp_center_lat = p.latitude;
        cells = p.cell.slice(0,p.cell.length);
        //console.log('cells', cells);
        var cell_exceed_bondary = false;
        var cell_latlng_array = [];
        for(var b=0;b<cells.length;b++){
          cell = cells[b];
          temp_polygon_x = cell[0];
          temp_polygon_y = cell[1];
          var cell_point = L.point(temp_polygon_x, temp_polygon_y);
          var cell_latlng = map.layerPointToLatLng(cell_point);
          var cell_lat = cell_latlng.lat;
          var cell_lng = cell_latlng.lng;
          cell_latlng_array.push([cell_lat, cell_lng]);
          if(inside([cell_lat, cell_lng], boundary)){
            d = calDistance(temp_center_lat, temp_center_lng, cell_lat, cell_lng, 'K');
            if(d > maxDistance){
              center_lng = temp_center_lng;
              center_lat = temp_center_lat;
              //polygon_x = temp_polygon_x;
              //polygon_y = temp_polygon_y;
              polygon_lat = cell_lat;
              polygon_lng = cell_lng;
              maxDistance = d;
              max_index = a;
            }
          }
        }

        for(var c=0;c<boundary.length;c++){
          boundary_point = boundary[c];
          temp_boundary_lat = boundary_point[0];
          temp_boundary_lng = boundary_point[1];
          if(inside([temp_boundary_lat, temp_boundary_lng], cell_latlng_array)){
            d = calDistance(temp_center_lat, temp_center_lng, temp_boundary_lat, temp_boundary_lng, 'K');
            if(d > maxDistance){
              center_lng = temp_center_lng;
              center_lat = temp_center_lat;
              polygon_lat = temp_boundary_lat;
              polygon_lng = temp_boundary_lng;
              maxDistance = d;
            }
          }
        }

      }

      r_k = calDistance(polygon_lat, polygon_lng, center_lat, center_lng, 'K');

      // add a line indicating the maximum distance
      if(polyline2 != null){
        map.removeLayer(polyline2);
      }

      polyline2 =
        L.polyline([[polygon_lat, polygon_lng], [center_lat,center_lng]], {
        color: 'red',
        'opacity':0.8
      }).addTo(map);

      // refresh the text content
      d3.select('#selected h2')
        .html('')
        .text('maximum closest-MRT-distance: ' + r_k + 'km');

      // highlight the cell
      // d3.selectAll('path.point-cell')
      // .data(filteredPoints)
      // .each(function(d,i){
      //   if(d.latitude==center_lat && d.longitude==center_lng ){
      //     d3.select(this).style({'fill':'red','opacity':0.5});
      //   }
      // });
    }

    var svg = d3.select(map.getPanes().overlayPane).append("svg")
      .attr('id', 'overlay')
      .attr("class", "leaflet-zoom-hide")
      .style("width", map.getSize().x + 'px')
      .style("height", map.getSize().y + 'px')
      .style("margin-left", topLeft.x + "px")
      .style("margin-top", topLeft.y + "px");

    var g = svg.append("g")
      .attr("transform", "translate(" + (-topLeft.x) + "," + (-topLeft.y) + ")");

    var svgPoints = g.attr("class", "points")
      .selectAll("g")
        .data(filteredPoints)
      .enter().append("g")
        .attr("class", "point");

    var buildPathFromPoint = function(point) {
      return "M" + point.cell.join("L") + "Z";
    }

    svgPoints.append("path")
      .attr("class", "point-cell")
      .attr("d", buildPathFromPoint)
      .on('click', selectPoint)
      .classed("selected", function(d) { return lastSelectedPoint == d} );

    svgPoints.append("circle")
      .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; })
      .style('fill', function(d) { return '#' + d.color } )
      .attr("r", 5);

    getMaxDistance(filteredPoints);
  }

  var mapLayer = {
    onAdd: function(map) {
      map.on('viewreset moveend', drawWithLoading);
      drawWithLoading();
    }
  };

  drawPointTypeSelection();
  map.addLayer(mapLayer);
}
